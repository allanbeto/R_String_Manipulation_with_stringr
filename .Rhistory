phone_numbers <- c("510-555-0123", "541-555-0167")
# Use str_replace() to replace "-" with " "
str_replace(phone_numbers, pattern = "-", replace = "" )
# Use str_replace_all() to replace "-" with " "
str_replace_all(phone_numbers, pattern = "-", replace = "" )
# Turn phone numbers into the format xxx.xxx.xxxx
str_replace_all(phone_numbers, pattern = "-", replace = "." )
genes <- c("TTAGAGTAAATTAATCCAATCTTTGACCCAAATCTCTGCTGGATCCTCTGGTATTTCATGTTGGATGACGTCAATTTCTAATATTTCACCCAACCGTTGAGCACCTTGTGCGATCAATTGTTGATCCAGTTTTATGATTGCACCGCAGAAAGTGTCATATTCTGAGCTGCCTAAACCAACCGCCCCAAAGCGTACTTGGGATAAATCAGGCTTTTGTTGTTCGATCTGTTCTAATAATGGCTGCAAGTTATCAGGTAGATCCCCGGCACCATGAGTGGATGTCACGATTAACCACAGGCCATTCAGCGTAAGTTCGTCCAACTCTGGGCCATGAAGTATTTCTGTAGAAAACCCAGCTTCTTCTAATTTATCCGCTAAATGTTCAGCAACATATTCAGCACTACCAAGCGTACTGCCACTTATCAACGTTATGTCAGCCAT"
,"TTAAGGAACGATCGTACGCATGATAGGGTTTTGCAGTGATATTAGTGTCTCGGTTGACTGGATCTCATCAATAGTCTGGATTTTGTTGATAAGTACCTGCTGCAATGCATCAATGGATTTACACATCACTTTAATAAATATGCTGTAGTGGCCAGTGGTGTAATAGGCCTCAACCACTTCTTCTAAGCTTTCCAATTTTTTCAAGGCGGAAGGGTAATCTTTGGCACTTTTCAAGATTATGCCAATAAAGCAGCAAACGTCGTAACCCAGTTGTTTTGGGTTAACGTGTACACAAGCTGCGGTAATGATCCCTGCTTGCCGCATCTTTTCTACTCTTACATGAATAGTTCCGGGGCTAACAGCGAGGTTTTTGGCTAATTCAGCATAGGGTGTGCGTGCATTTTCCATTAATGCTTTCAGGATGCTGCGATCGAGATTATCGATCTGATAAATTTCACTCAT"
,"ATGAAAAAACAATTTATCCAAAAACAACAACAAATCAGCTTCGTAAAATCATTCTTTTCCCGCCAATTAGAGCAACAACTTGGCTTGATCGAAGTCCAGGCTCCTATTTTGAGCCGTGTGGGTGATGGAACCCAAGATAACCTTTCTGGTTCTGAGAAAGCGGTACAGGTAAAAGTTAAGTCATTGCCGGATTCAACTTTTGAAGTTGTACATTCATTAGCGAAGTGGAAACGTAAAACCTTAGGGCGTTTTGATTTTGGTGCTGACCAAGGGGTGTATACCCATATGAAAGCATTGCGCCCAGATGAAGATCGCCTGAGTGCTATTCATTCTGTATATGTAGATCAGTGGGATTGGGAACGGGTTATGGGGGACGGTGAACGTAACCTGGCTTACCTGAAATCGACTGTTAACAAGATTTATGCAGCGATTAAAGAAACTGAAGCGGCGATCAGTGCTGAGTTTGGTGTGAAGCCTTTCCTGCCGGATCATATTCAGTTTATCCACAGTGAAAGCCTGCGGGCCAGATTCCCTGATTTAGATGCTAAAGGCCGTGAACGTGCAATTGCCAAAGAGTTAGGTGCTGTCTTCCTTATAGGGATTGGTGGCAAATTGGCAGATGGTCAATCCCATGATGTTCGTGCGCCAGATTATGATGATTGGACCTCTCCGAGTGCGGAAGGTTTCTCTGGATTAAACGGCGACATTATTGTCTGGAACCCAATATTGGAAGATGCCTTTGAGATATCTTCTATGGGAATTCGTGTTGATGCCGAAGCTCTTAAGCGTCAGTTAGCCCTGACTGGCGATGAAGACCGCTTGGAACTGGAATGGCATCAATCACTGTTGCGCGGTGAAATGCCACAAACTATCGGGGGAGGTATTGGTCAGTCCCGCTTAGTGATGTTATTGCTGCAGAAACAACATATTGGTCAGGTGCAATGTGGTGTTTGGGGCCCTGAAATCAGCGAGAAAGTTGATGGCCTGCTGTAA")
genes <- c("TTAGAGTAAATTAATCCAATCTTTGACCCAAATCTCTGCTGGATCCTCTGGTATTTCATGTTGGATGACGTCAATTTCTAATATTTCACCCAACCGTTGAGCACCTTGTGCGATCAATTGTTGATCCAGTTTTATGATTGCACCGCAGAAAGTGTCATATTCTGAGCTGCCTAAACCAACCGCCCCAAAGCGTACTTGGGATAAATCAGGCTTTTGTTGTTCGATCTGTTCTAATAATGGCTGCAAGTTATCAGGTAGATCCCCGGCACCATGAGTGGATGTCACGATTAACCACAGGCCATTCAGCGTAAGTTCGTCCAACTCTGGGCCATGAAGTATTTCTGTAGAAAACCCAGCTTCTTCTAATTTATCCGCTAAATGTTCAGCAACATATTCAGCACTACCAAGCGTACTGCCACTTATCAACGTTATGTCAGCCAT"
,"TTAAGGAACGATCGTACGCATGATAGGGTTTTGCAGTGATATTAGTGTCTCGGTTGACTGGATCTCATCAATAGTCTGGATTTTGTTGATAAGTACCTGCTGCAATGCATCAATGGATTTACACATCACTTTAATAAATATGCTGTAGTGGCCAGTGGTGTAATAGGCCTCAACCACTTCTTCTAAGCTTTCCAATTTTTTCAAGGCGGAAGGGTAATCTTTGGCACTTTTCAAGATTATGCCAATAAAGCAGCAAACGTCGTAACCCAGTTGTTTTGGGTTAACGTGTACACAAGCTGCGGTAATGATCCCTGCTTGCCGCATCTTTTCTACTCTTACATGAATAGTTCCGGGGCTAACAGCGAGGTTTTTGGCTAATTCAGCATAGGGTGTGCGTGCATTTTCCATTAATGCTTTCAGGATGCTGCGATCGAGATTATCGATCTGATAAATTTCACTCAT"
,"ATGAAAAAACAATTTATCCAAAAACAACAACAAATCAGCTTCGTAAAATCATTCTTTTCCCGCCAATTAGAGCAACAACTTGGCTTGATCGAAGTCCAGGCTCCTATTTTGAGCCGTGTGGGTGATGGAACCCAAGATAACCTTTCTGGTTCTGAGAAAGCGGTACAGGTAAAAGTTAAGTCATTGCCGGATTCAACTTTTGAAGTTGTACATTCATTAGCGAAGTGGAAACGTAAAACCTTAGGGCGTTTTGATTTTGGTGCTGACCAAGGGGTGTATACCCATATGAAAGCATTGCGCCCAGATGAAGATCGCCTGAGTGCTATTCATTCTGTATATGTAGATCAGTGGGATTGGGAACGGGTTATGGGGGACGGTGAACGTAACCTGGCTTACCTGAAATCGACTGTTAACAAGATTTATGCAGCGATTAAAGAAACTGAAGCGGCGATCAGTGCTGAGTTTGGTGTGAAGCCTTTCCTGCCGGATCATATTCAGTTTATCCACAGTGAAAGCCTGCGGGCCAGATTCCCTGATTTAGATGCTAAAGGCCGTGAACGTGCAATTGCCAAAGAGTTAGGTGCTGTCTTCCTTATAGGGATTGGTGGCAAATTGGCAGATGGTCAATCCCATGATGTTCGTGCGCCAGATTATGATGATTGGACCTCTCCGAGTGCGGAAGGTTTCTCTGGATTAAACGGCGACATTATTGTCTGGAACCCAATATTGGAAGATGCCTTTGAGATATCTTCTATGGGAATTCGTGTTGATGCCGAAGCTCTTAAGCGTCAGTTAGCCCTGACTGGCGATGAAGACCGCTTGGAACTGGAATGGCATCAATCACTGTTGCGCGGTGAAATGCCACAAACTATCGGGGGAGGTATTGGTCAGTCCCGCTTAGTGATGTTATTGCTGCAGAAACAACATATTGGTCAGGTGCAATGTGGTGTTTGGGGCCCTGAAATCAGCGAGAAAGTTGATGGCCTGCTGTAA")
names(genes) <- c("YPO001","asnC" ,"asnA")
genes
# Find the number of nucleotides in each sequence
str_length(genes)
# Find the number of A's occur in each sequence
str_count(genes, pattern = fixed("A"))
# Return the sequences that contain "TTTTTT"
str_subset(genes, pattern = fixed("TTTTTT"))
# Replace all the "A"s in the sequences with a "_"
str_replace_all(genes, pattern =fixed("A"), replacement = "_")
# --- Task 1 ----
# Define some full names
names <- c("Diana Prince", "Clark Kent")
# Split into first and last names
names_split <- str_split(names, pattern = " ", simplify =  TRUE, n = 2)
# Extract the first letter in the first name
abb_first <- str_sub(names_split[,1], 1, 1)
# Combine the first letter ". " and last name
str_c(abb_first, ". ", names_split[,2])
# --- Task 2 ----
# Use all names in babynames_2014
all_names <- babynames_2014$name
# Get the last two letters of all_names
last_two_letters <- str_sub(all_names, -2, -1)
# Does the name end in "ee"?
ends_in_ee <- str_detect(last_two_letters, pattern = fixed("ee"))
# Extract rows and "sex" column
sex <- babynames_2014$sex[ends_in_ee]
# Display result as a table
table(sex)
install.packages("rebus")
library(rebus)
library(stringr)
# Some strings to practice with
x <- c("cat", "coat", "scotland", "tic toc")
# Print END
END
# Run me
str_view(x, pattern = START %R% "c")
# Match the strings that start with "co"
str_view(x, pattern = START %R% "co")
# Match the strings that end with "at"
str_view(x, pattern = "at" %R% END)
# Match the strings that is exactly "cat"
str_view(x, pattern = START %R% "cat" %R% END)
packrat::snapshot(prompt = FALSE)
x <- c("cat", "coat", "scotland", "tic toc")
# Match any character followed by a "t"
str_view(x, pattern = ANY_CHAR %R% "t")
# Match a "t" followed by any character
str_view(x, pattern = "t" %R% ANY_CHAR)
# Match two characters
str_view(x, pattern = ANY_CHAR %R% ANY_CHAR)
# Match a string with exactly three characters
str_view(x, pattern = START %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR %R% END)
install.packages("htmltools")
library(htmltools)
library(htmltools)
x <- c("cat", "coat", "scotland", "tic toc")
# Print END
END
# Run me
str_view(x, pattern = START %R% "c")
# Match the strings that start with "co"
str_view(x, pattern = START %R% "co")
# Match the strings that end with "at"
str_view(x, pattern = "at" %R% END)
# Match the strings that is exactly "cat"
str_view(x, pattern = START %R% "cat" %R% END)
install.packages("htmlwidgets")
packrat::snapshot(prompt = FALSE)
library(htmlwidgets)
t
str_view(x, pattern = START %R% "c")
# Run me
str_view(x, pattern = START %R% "c")
# Match the strings that start with "co"
str_view(x, pattern = START %R% "co")
# Match the strings that end with "at"
str_view(x, pattern = "at" %R% END)
# Match the strings that is exactly "cat"
str_view(x, pattern = START %R% "cat" %R% END)
#---------------------------------------------------> Matching any character
x <- c("cat", "coat", "scotland", "tic toc")
# Match any character followed by a "t"
str_view(x, pattern = ANY_CHAR %R% "t")
# Match a "t" followed by any character
str_view(x, pattern = "t" %R% ANY_CHAR)
# Match two characters
str_view(x, pattern = ANY_CHAR %R% ANY_CHAR)
# Match a string with exactly three characters
str_view(x, pattern = START %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR %R% END)
# q followed by any character
pattern <- "q" %R% ANY_CHAR
# Test pattern
str_view(c("Quentin", "Kaliq", "Jacques",  "Jacqes"), pattern)
# Find names that have the pattern
names_with_q <- str_subset(boy_names, pattern)
length(names_with_q)
# Find part of name that matches pattern
part_with_q <- str_extract(boy_names, pattern)
table(part_with_q)
# Did any names have the pattern more than once?
count_of_q <- str_count(boy_names, pattern)
table(count_of_q)
# Which babies got these names?
with_q <- str_detect(boy_names, pattern)
# What fraction of babies got these names?
mean(with_q)
#---------------------------------------------------> Alternation
# Match Jeffrey or Geoffrey
whole_names <- or("Jeffrey", "Geoffrey")
str_view(boy_names, pattern = whole_names,
match = TRUE)
# Match Jeffrey or Geoffrey, another way
common_ending <- or("Je", "Geo") %R% "ffrey"
str_view(boy_names, pattern = common_ending,
match = TRUE)
# Match with alternate endings
by_parts <- or("Je", "Geo") %R% "ff" %R% or("ry", "ery", "rey", "erey")
str_view(boy_names,
pattern = by_parts,
match = TRUE)
# Match names that start with Cath or Kath
ckath <- START %R% or("Cath", "Kath")
str_view(girl_names, pattern = ckath, match = TRUE)
# Create character class containing vowels
vowels <- char_class("Aa","Ee","Ii","Oo","Uu")
# Print vowels
vowels
# See vowels in x with str_view()
str_view(x, vowels)
# See vowels in x with str_view_all()
str_view_all(x, vowels)
# Number of vowels in boy_names
num_vowels <- str_count(boy_names, vowels)
mean(num_vowels)
# Proportion of vowels in boy_names
name_length <- str_length(boy_names)
mean(num_vowels/name_length)
x <- c("grey sky", "gray elephant")
# See vowels in x with str_view()
str_view(x, vowels)
# See vowels in x with str_view_all()
str_view_all(x, vowels)
contact <- c("Call me at 555-555-0191\n", "123 Main St\n", "(555) 555 0191\n", "Phone: 555.555.0191 Mobile: 555.555.0192")
contact
contact <- c("Call me at 555-555-0191",\n "123 Main St", \n "(555) 555 0191", \n"Phone: 555.555.0191 Mobile: 555.555.0192")
contact <- c("Call me at 555-555-0191", "123 Main St", "(555) 555 0191", "Phone: 555.555.0191 Mobile: 555.555.0192")
# Take a look at ALL digits
str_view_all(contact, pattern = DGT)
# Create a three digit pattern and test
three_digits <- DGT %R% DGT %R% DGT
str_view_all(contact,
pattern = three_digits)
# Create four digit pattern
four_digits <- three_digits %R% DGT
# Create a separator pattern and test
separator <- char_class("-.() ")
str_view_all(contact,
pattern = separator)
# Create phone pattern
phone_pattern <- optional(OPEN_PAREN) %R%
three_digits %R%
zero_or_more (separator) %R%
three_digits %R%
zero_or_more (separator) %R%
four_digits
# Test pattern
str_view(contact, pattern = phone_pattern)
# Extract phone numbers
str_extract(contact, pattern = phone_pattern)
# Extract ALL phone numbers
str_extract_all(contact, pattern = phone_pattern)
narrarives <- c("19YOM-SHOULDER STRAIN-WAS TACKLED WHILE PLAYING FOOTBALL W/ FRIENDS ",
"31 YOF FELL FROM TOILET HITITNG HEAD SUSTAINING A CHI ",
"ANKLE STR. 82 YOM STRAINED ANKLE GETTING OUT OF BED ",
"TRIPPED OVER CAT AND LANDED ON HARDWOOD FLOOR. LACERATION ELBOW, LEFT. 33 YOF*",
"10YOM CUT THUMB ON METAL TRASH CAN DX AVULSION OF SKIN OF THUMB ",
"53 YO F TRIPPED ON CARPET AT HOME. DX HIP CONTUSION ",
"13 MOF TRYING TO STAND UP HOLDING ONTO BED FELL AND HIT FOREHEAD ON RADIATOR DX LACERATION",
"14YR M PLAYING FOOTBALL; DX KNEE SPRAIN ",
"55YOM RIDER OF A BICYCLE AND FELL OFF SUSTAINED A CONTUSION TO KNEE ",
"5 YOM ROLLING ON FLOOR DOING A SOMERSAULT AND SUSTAINED A CERVICAL STRA IN")
age <- optional(DGT) %R% DGT
# Look for two digits
str_view(narratives, pattern= DGT %R% DGT)
# Pattern to match one or two digits
age <- one_or_more(DGT)
str_view(narratives,
pattern = age)
# Pattern to match units
unit <- optional(SPACE) %R% or("YO", "YR", "MO")
# Test pattern with age then units
str_view(narratives,
pattern = age %R% unit)
# Pattern to match gender
gender <- optional(SPACE) %R% or("M", "F")
# Test pattern with age then units then gender
str_view(narratives,
pattern = age %R% unit %R% gender)
# Extract age_gender, take a look
age_gender <- str_extract(narratives, age %R% unit %R% gender)
age_gender
narratives <- c("19YOM-SHOULDER STRAIN-WAS TACKLED WHILE PLAYING FOOTBALL W/ FRIENDS ",
"31 YOF FELL FROM TOILET HITITNG HEAD SUSTAINING A CHI ",
"ANKLE STR. 82 YOM STRAINED ANKLE GETTING OUT OF BED ",
"TRIPPED OVER CAT AND LANDED ON HARDWOOD FLOOR. LACERATION ELBOW, LEFT. 33 YOF*",
"10YOM CUT THUMB ON METAL TRASH CAN DX AVULSION OF SKIN OF THUMB ",
"53 YO F TRIPPED ON CARPET AT HOME. DX HIP CONTUSION ",
"13 MOF TRYING TO STAND UP HOLDING ONTO BED FELL AND HIT FOREHEAD ON RADIATOR DX LACERATION",
"14YR M PLAYING FOOTBALL; DX KNEE SPRAIN ",
"55YOM RIDER OF A BICYCLE AND FELL OFF SUSTAINED A CONTUSION TO KNEE ",
"5 YOM ROLLING ON FLOOR DOING A SOMERSAULT AND SUSTAINED A CERVICAL STRA IN")
age <- optional(DGT) %R% DGT
# Look for two digits
str_view(narratives, pattern= DGT %R% DGT)
# Pattern to match one or two digits
age <- one_or_more(DGT)
str_view(narratives,
pattern = age)
# Pattern to match units
unit <- optional(SPACE) %R% or("YO", "YR", "MO")
# Test pattern with age then units
str_view(narratives,
pattern = age %R% unit)
# Pattern to match gender
gender <- optional(SPACE) %R% or("M", "F")
# Test pattern with age then units then gender
str_view(narratives,
pattern = age %R% unit %R% gender)
# Extract age_gender, take a look
age_gender <- str_extract(narratives, age %R% unit %R% gender)
age_gender
# age_gender, age, gender, unit are pre-defined
# ls.str()
# Extract age and make numeric
ages_numeric <- as.numeric(str_extract(age_gender, pattern = age))
# Replace age and units with ""
genders <- str_replace(age_gender,
pattern = age %R% unit,
replacement = "")
# Replace extra spaces
genders_clean <- str_replace_all(genders,
pattern = optional(SPACE),
replacement = "")
# Extract units
time_units <- str_extract(age_gender,
pattern = unit)
# Extract first word character
time_units_clean <- str_extract(time_units,
pattern = WRD)
# Turn ages in months to years
ages_years <- ifelse(time_units_clean == "Y", ages_numeric, ages_numeric/12)
ages_years
library(rebus)
library(htmltools)
library(htmlwidgets)
hero_contacts <- c("(wolverine@xmen.com)",          "wonderwoman@justiceleague.org",
"thor@avengers.com")
# Capture part between @ and . and after .
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
# Check match hasn't changed
str_view(hero_contacts, pattern = email)
# Pull out match and captures
email_parts <- str_match(hero_contacts, pattern = email)
# Print email_parts
email_parts
# Save host
host <- email_parts[,3]
host
library(stringr)
hero_contacts <- c("(wolverine@xmen.com)",          "wonderwoman@justiceleague.org",
"thor@avengers.com")
# Capture part between @ and . and after .
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
# Check match hasn't changed
str_view(hero_contacts, pattern = email)
# Pull out match and captures
email_parts <- str_match(hero_contacts, pattern = email)
# Print email_parts
email_parts
# Save host
host <- email_parts[,3]
host
# View text containing phone numbers
contact
# Add capture() to get digit parts
phone_pattern <- capture(three_digits) %R% zero_or_more(separator) %R%
capture(three_digits) %R% zero_or_more(separator) %R%
capture(four_digits)
# Pull out the parts with str_match()
phone_numbers <- str_match(contact, pattern = phone_pattern)
# Put them back together
str_c(
"(",
phone_numbers[,2],
") ",
phone_numbers[,3],
"-",
phone_numbers[,4])
-----------> Extracting age and gender again
# narratives has been pre-defined
narratives
# Add capture() to get age, unit and sex
pattern <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("YO", "YR", "MO")) %R%
optional(SPC) %R% capture(or("M", "F"))
# Pull out from narratives
str_match(narratives, pattern = pattern)
# Edit to capture just Y and M in units
pattern2 <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("Y", "M")) %R% optional(or("O","R")) %R%
optional(SPC) %R% capture(or("M", "F"))
# Check pattern
str_view(narratives, pattern = pattern2)
# Pull out pieces
str_match(narratives, pattern = pattern2)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
boy_names["otto"]
boy_names["Otto"]
boy_names <- str_to_lower(boy_df$name)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# View text containing phone numbers
contact
# Replace digits with "X"
str_replace(contact, pattern = DGT, replacement = "X")
# Replace all digits with "X"
str_replace_all(contact, pattern = DGT, replacement = "X")
# Replace all digits with different symbol
str_replace_all(contact, pattern = DGT,
replacement = c("X", ".", "*", "_") )
adverbs <- c("ABNORMALLY"       ,"ABSENTMINDEDLY",   "ACCIDENTALLY"    ,
"ACIDLY"          , "ACTUALLY"      ,   "ADVENTUROUSLY"  ,
"AFTERWARDS"     ,  "ALMOST"        ,   "ALWAYS"        ,
"ANGRILY"       ,   "ANNUALLY"       ,  "ANXIOUSLY"    ,
"ARROGANTLY"   ,    "AWKWARDLY"       , "BADLY"      ,
"BASHFULLY"   ,     "BEAUTIFULLY"      ,"BITTERLY"    ,
"BLEAKLY"    ,      "BLINDLY"          ,"BLISSFULLY",
"BOASTFULLY",       "BOLDLY"           ,"BRAVELY")
#Build pattern to match words ending in "ING"
pattern <- one_or_more(WRD) %R% "ING"
str_view(narratives, pattern)
# Test replacement
str_replace(narratives, capture(pattern), str_c("CARELESSLY", REF1, sep = " "))
# One adverb per narrative
adverbs_10 <- sample(adverbs, 10)
# Replace "***ing" with "adverb ***ing"
str_replace(narratives, capture(pattern),  str_c(adverbs_10, REF1, sep = " "))
# Names with builtin accents
(tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
))
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
# Names with builtin accents
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
"\u03BC"
library(stringr)
library(dplyr)
library(babynames)
library(rebus)
library(htmltools)
library(htmlwidgets)
writeLines("\U0001F44F")
install.packages("stringi")
packrat::restore(prompt = FALSE)
library("stringi")
remove.packages(stringi)
install.packages(stringi)
remove.packages("stringi", lib="")
packrat::restore(prompt = FALSE)
install.packages("stringi")
library(stringr)
library(stringi)
packrat::snapshot()
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
library(stringr)
library(dplyr)
library(babynames)
library(rebus)
library(htmltools)
library(htmlwidgets)
library("stringi")
# Names with builtin accents
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
