str_view(boy_names, pattern = whole_names,
match = TRUE)
# Match Jeffrey or Geoffrey, another way
common_ending <- or("Je", "Geo") %R% "ffrey"
str_view(boy_names, pattern = common_ending,
match = TRUE)
# Match with alternate endings
by_parts <- or("Je", "Geo") %R% "ff" %R% or("ry", "ery", "rey", "erey")
str_view(boy_names,
pattern = by_parts,
match = TRUE)
# Match names that start with Cath or Kath
ckath <- START %R% or("Cath", "Kath")
str_view(girl_names, pattern = ckath, match = TRUE)
# Create character class containing vowels
vowels <- char_class("Aa","Ee","Ii","Oo","Uu")
# Print vowels
vowels
# See vowels in x with str_view()
str_view(x, vowels)
# See vowels in x with str_view_all()
str_view_all(x, vowels)
# Number of vowels in boy_names
num_vowels <- str_count(boy_names, vowels)
mean(num_vowels)
# Proportion of vowels in boy_names
name_length <- str_length(boy_names)
mean(num_vowels/name_length)
x <- c("grey sky", "gray elephant")
# See vowels in x with str_view()
str_view(x, vowels)
# See vowels in x with str_view_all()
str_view_all(x, vowels)
contact <- c("Call me at 555-555-0191\n", "123 Main St\n", "(555) 555 0191\n", "Phone: 555.555.0191 Mobile: 555.555.0192")
contact
contact <- c("Call me at 555-555-0191",\n "123 Main St", \n "(555) 555 0191", \n"Phone: 555.555.0191 Mobile: 555.555.0192")
contact <- c("Call me at 555-555-0191", "123 Main St", "(555) 555 0191", "Phone: 555.555.0191 Mobile: 555.555.0192")
# Take a look at ALL digits
str_view_all(contact, pattern = DGT)
# Create a three digit pattern and test
three_digits <- DGT %R% DGT %R% DGT
str_view_all(contact,
pattern = three_digits)
# Create four digit pattern
four_digits <- three_digits %R% DGT
# Create a separator pattern and test
separator <- char_class("-.() ")
str_view_all(contact,
pattern = separator)
# Create phone pattern
phone_pattern <- optional(OPEN_PAREN) %R%
three_digits %R%
zero_or_more (separator) %R%
three_digits %R%
zero_or_more (separator) %R%
four_digits
# Test pattern
str_view(contact, pattern = phone_pattern)
# Extract phone numbers
str_extract(contact, pattern = phone_pattern)
# Extract ALL phone numbers
str_extract_all(contact, pattern = phone_pattern)
narrarives <- c("19YOM-SHOULDER STRAIN-WAS TACKLED WHILE PLAYING FOOTBALL W/ FRIENDS ",
"31 YOF FELL FROM TOILET HITITNG HEAD SUSTAINING A CHI ",
"ANKLE STR. 82 YOM STRAINED ANKLE GETTING OUT OF BED ",
"TRIPPED OVER CAT AND LANDED ON HARDWOOD FLOOR. LACERATION ELBOW, LEFT. 33 YOF*",
"10YOM CUT THUMB ON METAL TRASH CAN DX AVULSION OF SKIN OF THUMB ",
"53 YO F TRIPPED ON CARPET AT HOME. DX HIP CONTUSION ",
"13 MOF TRYING TO STAND UP HOLDING ONTO BED FELL AND HIT FOREHEAD ON RADIATOR DX LACERATION",
"14YR M PLAYING FOOTBALL; DX KNEE SPRAIN ",
"55YOM RIDER OF A BICYCLE AND FELL OFF SUSTAINED A CONTUSION TO KNEE ",
"5 YOM ROLLING ON FLOOR DOING A SOMERSAULT AND SUSTAINED A CERVICAL STRA IN")
age <- optional(DGT) %R% DGT
# Look for two digits
str_view(narratives, pattern= DGT %R% DGT)
# Pattern to match one or two digits
age <- one_or_more(DGT)
str_view(narratives,
pattern = age)
# Pattern to match units
unit <- optional(SPACE) %R% or("YO", "YR", "MO")
# Test pattern with age then units
str_view(narratives,
pattern = age %R% unit)
# Pattern to match gender
gender <- optional(SPACE) %R% or("M", "F")
# Test pattern with age then units then gender
str_view(narratives,
pattern = age %R% unit %R% gender)
# Extract age_gender, take a look
age_gender <- str_extract(narratives, age %R% unit %R% gender)
age_gender
narratives <- c("19YOM-SHOULDER STRAIN-WAS TACKLED WHILE PLAYING FOOTBALL W/ FRIENDS ",
"31 YOF FELL FROM TOILET HITITNG HEAD SUSTAINING A CHI ",
"ANKLE STR. 82 YOM STRAINED ANKLE GETTING OUT OF BED ",
"TRIPPED OVER CAT AND LANDED ON HARDWOOD FLOOR. LACERATION ELBOW, LEFT. 33 YOF*",
"10YOM CUT THUMB ON METAL TRASH CAN DX AVULSION OF SKIN OF THUMB ",
"53 YO F TRIPPED ON CARPET AT HOME. DX HIP CONTUSION ",
"13 MOF TRYING TO STAND UP HOLDING ONTO BED FELL AND HIT FOREHEAD ON RADIATOR DX LACERATION",
"14YR M PLAYING FOOTBALL; DX KNEE SPRAIN ",
"55YOM RIDER OF A BICYCLE AND FELL OFF SUSTAINED A CONTUSION TO KNEE ",
"5 YOM ROLLING ON FLOOR DOING A SOMERSAULT AND SUSTAINED A CERVICAL STRA IN")
age <- optional(DGT) %R% DGT
# Look for two digits
str_view(narratives, pattern= DGT %R% DGT)
# Pattern to match one or two digits
age <- one_or_more(DGT)
str_view(narratives,
pattern = age)
# Pattern to match units
unit <- optional(SPACE) %R% or("YO", "YR", "MO")
# Test pattern with age then units
str_view(narratives,
pattern = age %R% unit)
# Pattern to match gender
gender <- optional(SPACE) %R% or("M", "F")
# Test pattern with age then units then gender
str_view(narratives,
pattern = age %R% unit %R% gender)
# Extract age_gender, take a look
age_gender <- str_extract(narratives, age %R% unit %R% gender)
age_gender
# age_gender, age, gender, unit are pre-defined
# ls.str()
# Extract age and make numeric
ages_numeric <- as.numeric(str_extract(age_gender, pattern = age))
# Replace age and units with ""
genders <- str_replace(age_gender,
pattern = age %R% unit,
replacement = "")
# Replace extra spaces
genders_clean <- str_replace_all(genders,
pattern = optional(SPACE),
replacement = "")
# Extract units
time_units <- str_extract(age_gender,
pattern = unit)
# Extract first word character
time_units_clean <- str_extract(time_units,
pattern = WRD)
# Turn ages in months to years
ages_years <- ifelse(time_units_clean == "Y", ages_numeric, ages_numeric/12)
ages_years
library(rebus)
library(htmltools)
library(htmlwidgets)
hero_contacts <- c("(wolverine@xmen.com)",          "wonderwoman@justiceleague.org",
"thor@avengers.com")
# Capture part between @ and . and after .
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
# Check match hasn't changed
str_view(hero_contacts, pattern = email)
# Pull out match and captures
email_parts <- str_match(hero_contacts, pattern = email)
# Print email_parts
email_parts
# Save host
host <- email_parts[,3]
host
library(stringr)
hero_contacts <- c("(wolverine@xmen.com)",          "wonderwoman@justiceleague.org",
"thor@avengers.com")
# Capture part between @ and . and after .
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
# Check match hasn't changed
str_view(hero_contacts, pattern = email)
# Pull out match and captures
email_parts <- str_match(hero_contacts, pattern = email)
# Print email_parts
email_parts
# Save host
host <- email_parts[,3]
host
# View text containing phone numbers
contact
# Add capture() to get digit parts
phone_pattern <- capture(three_digits) %R% zero_or_more(separator) %R%
capture(three_digits) %R% zero_or_more(separator) %R%
capture(four_digits)
# Pull out the parts with str_match()
phone_numbers <- str_match(contact, pattern = phone_pattern)
# Put them back together
str_c(
"(",
phone_numbers[,2],
") ",
phone_numbers[,3],
"-",
phone_numbers[,4])
-----------> Extracting age and gender again
# narratives has been pre-defined
narratives
# Add capture() to get age, unit and sex
pattern <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("YO", "YR", "MO")) %R%
optional(SPC) %R% capture(or("M", "F"))
# Pull out from narratives
str_match(narratives, pattern = pattern)
# Edit to capture just Y and M in units
pattern2 <- capture(optional(DGT) %R% DGT) %R%
optional(SPC) %R% capture(or("Y", "M")) %R% optional(or("O","R")) %R%
optional(SPC) %R% capture(or("M", "F"))
# Check pattern
str_view(narratives, pattern = pattern2)
# Pull out pieces
str_match(narratives, pattern = pattern2)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
boy_names["otto"]
boy_names["Otto"]
boy_names <- str_to_lower(boy_df$name)
# See names with three repeated letters
repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1
str_view(boy_names,
pattern = repeated_three_times,
match = TRUE)
# See names with a pair of repeated letters
pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1
str_view(boy_names,
pattern = pair_of_repeated,
match = TRUE)
# See names with a pair that reverses
pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1
str_view(boy_names,
pattern = pair_that_reverses,
match = TRUE)
# See four letter palindrome names
four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)
str_view(boy_names,
pattern = four_letter_palindrome,
match = TRUE)
# See six letter palindrome names
six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)
str_view(boy_names,
pattern = six_letter_palindrome,
match = TRUE)
# View text containing phone numbers
contact
# Replace digits with "X"
str_replace(contact, pattern = DGT, replacement = "X")
# Replace all digits with "X"
str_replace_all(contact, pattern = DGT, replacement = "X")
# Replace all digits with different symbol
str_replace_all(contact, pattern = DGT,
replacement = c("X", ".", "*", "_") )
adverbs <- c("ABNORMALLY"       ,"ABSENTMINDEDLY",   "ACCIDENTALLY"    ,
"ACIDLY"          , "ACTUALLY"      ,   "ADVENTUROUSLY"  ,
"AFTERWARDS"     ,  "ALMOST"        ,   "ALWAYS"        ,
"ANGRILY"       ,   "ANNUALLY"       ,  "ANXIOUSLY"    ,
"ARROGANTLY"   ,    "AWKWARDLY"       , "BADLY"      ,
"BASHFULLY"   ,     "BEAUTIFULLY"      ,"BITTERLY"    ,
"BLEAKLY"    ,      "BLINDLY"          ,"BLISSFULLY",
"BOASTFULLY",       "BOLDLY"           ,"BRAVELY")
#Build pattern to match words ending in "ING"
pattern <- one_or_more(WRD) %R% "ING"
str_view(narratives, pattern)
# Test replacement
str_replace(narratives, capture(pattern), str_c("CARELESSLY", REF1, sep = " "))
# One adverb per narrative
adverbs_10 <- sample(adverbs, 10)
# Replace "***ing" with "adverb ***ing"
str_replace(narratives, capture(pattern),  str_c(adverbs_10, REF1, sep = " "))
# Names with builtin accents
(tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
))
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
# Names with builtin accents
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
"\u03BC"
library(stringr)
library(dplyr)
library(babynames)
library(rebus)
library(htmltools)
library(htmlwidgets)
writeLines("\U0001F44F")
install.packages("stringi")
packrat::restore(prompt = FALSE)
library("stringi")
remove.packages(stringi)
install.packages(stringi)
remove.packages("stringi", lib="")
packrat::restore(prompt = FALSE)
install.packages("stringi")
library(stringr)
library(stringi)
packrat::snapshot()
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
library(stringr)
library(dplyr)
library(babynames)
library(rebus)
library(htmltools)
library(htmlwidgets)
library("stringi")
# Names with builtin accents
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
library(stringr)
library(dplyr)
library(babynames)
library(rebus)
library(htmltools)
library(htmlwidgets)
# Names with builtin accents
tay_son_builtin <- c(
"Nguy\u1ec5n Nh\u1ea1c",
"Nguy\u1ec5n Hu\u1ec7",
"Nguy\u1ec5n Quang To\u1ea3n"
)
# Convert to separate accents
tay_son_separate <- stri_trans_nfd(tay_son_builtin)
# Verify that the string prints the same
tay_son_separate
# Match all accents
str_view_all(tay_son_separate, UP_DIACRITIC)
# tay_son_separate has been pre-defined
tay_son_separate
# View all the characters in tay_son_separate
str_view_all(tay_son_separate, ANY_CHAR)
# View all the graphemes in tay_son_separate
str_view_all(tay_son_separate, GRAPHEME)
# Combine the diacritics with their letters
tay_son_builtin <- stri_trans_nfc(tay_son_separate)
# View all the graphemes in tay_son_builtin
str_view_all(tay_son_builtin, GRAPHEME)
str_view_all(tay_son_separate, ANY_CHAR)
str_view_all(tay_son_separate, GRAPHEME)
str_view_all(tay_son_builtin, GRAPHEME)
str_view_all(tay_son_separate, GRAPHEME)
str_view_all(tay_son_builtin, GRAPHEME)
tay_son_separate
str_view_all(tay_son_separate, ANY_CHAR)
str_view_all(tay_son_separate, GRAPHEME)
str_view_all(tay_son_builtin, GRAPHEME)
url  <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2922/datasets/importance-of-being-earnest.txt"
download.file(url, "importance-of-being-earnest.txt")
library(stringi)
library(stringr)
# Read play in using stri_read_lines()
earnest <- stri_read_lines("importance-of-being-earnest.txt")
# Detect start and end lines
start <- which(str_detect(earnest, pattern = "START OF THE PROJECT"))
end   <- which(str_detect(earnest, pattern = "END OF THE PROJECT"))
# Get rid of gutenberg intro text
earnest_sub  <- earnest[(start+1):(end-1)]
# Detect first act
lines_start <- which(str_detect(earnest_sub, pattern = "FIRST ACT"))
# Set up index
intro_line_index <- 1:(lines_start-1)
# Split play into intro and play
intro_text <- earnest_sub[intro_line_index]
play_text <-  earnest_sub[-intro_line_index]
# Take a look at the first 20 lines
writeLines(play_text)
# Get rid of empty strings
empty <- stri_isempty(play_text)
play_lines <- play_text[!empty]
# Pattern for start word then .
pattern_1 <- START %R% one_or_more(WRD) %R% DOT
# Test pattern_1
str_view(play_lines, pattern = pattern_1,
match = TRUE)
str_view(play_lines, pattern = pattern_1,
match = FALSE)
# Pattern for start, capital, word then .
pattern_2 <- START %R% ascii_upper() %R% one_or_more(WRD) %R% DOT
# View matches of pattern_2
str_view(play_lines, pattern = pattern_2,
match = TRUE)
# View non-matches of pattern_2
str_view(play_lines, pattern = pattern_2,
match = FALSE)
# Get subset of lines that match
lines <- str_subset(play_lines, pattern = pattern_2)
# Extract match from lines
who <- str_extract(lines, pattern = pattern_2)
# Let's see what we have
unique(who)
library(rebus)
library(htmltools)
library(htmlwidgets)
library(stringi)
empty <- stri_isempty(play_text)
play_lines <- play_text[!empty]
# Pattern for start word then .
pattern_1 <- START %R% one_or_more(WRD) %R% DOT
# Test pattern_1
str_view(play_lines, pattern = pattern_1,
match = TRUE)
str_view(play_lines, pattern = pattern_1,
match = FALSE)
# Pattern for start, capital, word then .
pattern_2 <- START %R% ascii_upper() %R% one_or_more(WRD) %R% DOT
# View matches of pattern_2
str_view(play_lines, pattern = pattern_2,
match = TRUE)
# View non-matches of pattern_2
str_view(play_lines, pattern = pattern_2,
match = FALSE)
# Get subset of lines that match
lines <- str_subset(play_lines, pattern = pattern_2)
# Extract match from lines
who <- str_extract(lines, pattern = pattern_2)
# Let's see what we have
unique(who)
# Create vector of characters
characters <- c("Algernon", "Jack", "Lane", "Cecily", "Gwendolen", "Chasuble",
"Merriman", "Lady Bracknell", "Miss Prism")
# Match start, then character name, then .
pattern_3 <- START %R% or1(characters) %R% DOT
# View matches of pattern_3
str_view(play_lines, pattern = pattern_3, match = TRUE)
# View non-matches of pattern_3
str_view(play_lines, pattern = pattern_3, match = FALSE)
# Pull out matches
lines <- str_subset(play_lines, pattern = pattern_3)
# Extract match from lines
who <- str_extract(lines, pattern = pattern_3)
# Let's see what we have
unique(who)
# Count lines per character
table(who)
